const Blog = require('../models/Blog');

const BLOG_BASE_URL = 'https://nhom11nt208p24.vercel.app/blog-read?post=';

const handleChatQuery = async (req, res) => {
  const message = req.body.message?.toLowerCase() || '';
  const kbAnswer = req.body.kbAnswer || null;
  let apiReply = null;

  // üîç Ki·ªÉm tra c√≥ c·∫ßn API kh√¥ng
  const needsAPI =
    /blog.*(nhi·ªÅu l∆∞·ª£t xem|xem nhi·ªÅu|hot|ƒë∆∞·ª£c xem)|blog.*(?:v·ªÅ|ch·ªß ƒë·ªÅ)\s+.+|ch·ªß ƒë·ªÅ blog|danh m·ª•c blog|blog c√≥ nh·ªØng g√¨|c√°c ch·ªß ƒë·ªÅ/.test(message);

  if (!needsAPI && kbAnswer) {
    return res.json({ reply: kbAnswer });
  }

  // üéØ Tr∆∞·ªùng h·ª£p 1: h·ªèi blog ƒë∆∞·ª£c xem nhi·ªÅu
  if (/blog.*(nhi·ªÅu l∆∞·ª£t xem|xem nhi·ªÅu|hot|ƒë∆∞·ª£c xem)/i.test(message)) {
    try {
      const blogs = await Blog.find({ approved: true }).sort({ views: -1 }).limit(5).lean();
      if (!blogs.length) {
        apiReply = 'üì≠ Hi·ªán ch∆∞a c√≥ blog n√†o ƒë∆∞·ª£c xem nhi·ªÅu.';
      } else {
        apiReply = 'üî• **Top blog ƒë∆∞·ª£c xem nhi·ªÅu nh·∫•t:**\n\n' +
          blogs.map(b =>
            `‚Ä¢ [${b.title}](${BLOG_BASE_URL}${b._id}) ‚Äî üëÅ ${b.views} l∆∞·ª£t xem`
          ).join('\n');
      }
    } catch (err) {
      console.error('L·ªói truy v·∫•n blog nhi·ªÅu l∆∞·ª£t xem:', err);
      apiReply = '‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi l·∫•y blog.';
    }
  }

  // üéØ Tr∆∞·ªùng h·ª£p 2: h·ªèi blog theo ch·ªß ƒë·ªÅ
  else if (/blog.*(?:v·ªÅ|ch·ªß ƒë·ªÅ)\s+(.+)/i.test(message)) {
    const match = message.match(/blog.*(?:v·ªÅ|ch·ªß ƒë·ªÅ)\s+(.+)/i);
    const category = match?.[1]?.trim();
    if (category) {
      try {
        const blogs = await Blog.find({
          approved: true,
          category: { $regex: category, $options: 'i' }
        }).sort({ views: -1 }).limit(5).lean();

        if (!blogs.length) {
          apiReply = `üì≠ Kh√¥ng t√¨m th·∫•y blog n√†o v·ªÅ ch·ªß ƒë·ªÅ ‚Äú${category}‚Äù.`;
        } else {
          apiReply = `üìö **Blog n·ªïi b·∫≠t v·ªÅ ch·ªß ƒë·ªÅ ‚Äú${category}‚Äù**:\n\n` +
            blogs.map(b =>
              `‚Ä¢ [${b.title}](${BLOG_BASE_URL}${b._id}) ‚Äî üëÅ ${b.views} l∆∞·ª£t xem`
            ).join('\n');
        }
      } catch (err) {
        console.error('L·ªói truy v·∫•n blog theo ch·ªß ƒë·ªÅ:', err);
        apiReply = '‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y blog theo ch·ªß ƒë·ªÅ.';
      }
    }
  }

  // üéØ Tr∆∞·ªùng h·ª£p 3: h·ªèi v·ªÅ danh m·ª•c blog
  else if (/ch·ªß ƒë·ªÅ blog|danh m·ª•c blog|blog c√≥ nh·ªØng g√¨|c√°c ch·ªß ƒë·ªÅ/i.test(message)) {
    try {
      const categories = await Blog.distinct('category');
      if (!categories.length) {
        apiReply = 'Hi·ªán t·∫°i ch∆∞a c√≥ ch·ªß ƒë·ªÅ blog n√†o.';
      } else {
        apiReply = 'üóÇÔ∏è **C√°c ch·ªß ƒë·ªÅ blog hi·ªán c√≥:**\n' + categories.map(c => `‚Ä¢ ${c}`).join('\n');
      }
    } catch (err) {
      console.error('L·ªói khi l·∫•y danh m·ª•c blog:', err);
      apiReply = '‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y danh s√°ch ch·ªß ƒë·ªÅ blog.';
    }
  }

  const finalReply = apiReply || kbAnswer || '‚ùì Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.';
  return res.json({ reply: finalReply });
};

module.exports = { handleChatQuery };
